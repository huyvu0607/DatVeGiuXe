@model ParkingReservationSystem.ViewModels.MultipleReservationModel
@{
    ViewData["Title"] = "Tạo đặt chỗ mới";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<style>
    .modern-card {
        border-radius: 20px;
        box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1), 0 5px 15px rgba(0, 0, 0, 0.07);
        border: none;
        overflow: hidden;
        transition: all 0.3s ease;
    }

    .modern-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15), 0 10px 20px rgba(0, 0, 0, 0.1);
    }

    .card-header-modern {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 2rem;
        position: relative;
        overflow: hidden;
    }

    .form-group-modern {
        margin-bottom: 2rem;
        position: relative;
    }

    .form-control-modern {
        border: 2px solid #e9ecef;
        border-radius: 12px;
        padding: 15px 20px;
        font-size: 16px;
        transition: all 0.3s ease;
        background: rgba(255, 255, 255, 0.8);
        backdrop-filter: blur(10px);
    }

    .form-control-modern:focus {
        border-color: #667eea;
        box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
        transform: translateY(-2px);
    }

    .form-label-modern {
        font-weight: 600;
        color: #495057;
        margin-bottom: 8px;
        display: block;
        font-size: 14px;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .btn-primary-modern {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border: none;
        border-radius: 50px;
        padding: 15px 40px;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 1px;
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
    }

    .btn-primary-modern::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
        transition: left 0.5s ease;
    }

    .btn-primary-modern:hover::before {
        left: 100%;
    }

    .btn-primary-modern:hover {
        transform: translateY(-3px);
        box-shadow: 0 10px 25px rgba(102, 126, 234, 0.4);
    }

    .btn-secondary-modern {
        background: linear-gradient(135deg, #6c757d 0%, #495057 100%);
        border: none;
        border-radius: 50px;
        padding: 12px 30px;
        color: white;
        text-decoration: none;
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .btn-secondary-modern:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 20px rgba(108, 117, 125, 0.4);
        color: white;
        text-decoration: none;
    }

    .checkbox-modern {
        position: relative;
        display: flex;
        align-items: center;
        padding: 1rem;
        background: rgba(102, 126, 234, 0.05);
        border-radius: 12px;
        border: 2px solid rgba(102, 126, 234, 0.1);
        transition: all 0.3s ease;
    }

    .checkbox-modern:hover {
        background: rgba(102, 126, 234, 0.1);
        border-color: rgba(102, 126, 234, 0.2);
    }

    .checkbox-modern input[type="checkbox"] {
        width: 20px;
        height: 20px;
        margin-right: 12px;
        accent-color: #667eea;
    }

    .page-title {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 2rem;
        text-align: center;
    }

    .container-modern {
        max-width: 1000px;
        margin: 0 auto;
        padding: 2rem;
    }

    .validation-summary {
        background: linear-gradient(135deg, #ff6b6b 0%, #ee5a52 100%);
        color: white;
        padding: 1rem;
        border-radius: 12px;
        margin-bottom: 1.5rem;
    }

    .text-danger {
        color: #dc3545 !important;
        font-size: 0.875rem;
        margin-top: 0.5rem;
        display: block;
    }

    .form-actions {
        display: flex;
        gap: 1rem;
        justify-content: center;
        align-items: center;
        margin-top: 2rem;
        padding-top: 2rem;
        border-top: 2px solid #e9ecef;
    }

    /* Parking slots styling with filters */
    .parking-section {
        background: rgba(255, 255, 255, 0.8);
        border: 2px solid #e9ecef;
        border-radius: 12px;
        padding: 20px;
    }

    .filters-container {
        display: flex;
        gap: 15px;
        margin-bottom: 20px;
        flex-wrap: wrap;
        align-items: end;
    }

    .filter-group {
        flex: 1;
        min-width: 200px;
    }

    .filter-group label {
        display: block;
        font-size: 12px;
        color: #6c757d;
        margin-bottom: 5px;
        font-weight: 500;
    }

    .filter-input {
        width: 100%;
        padding: 8px 12px;
        border: 1px solid #ddd;
        border-radius: 8px;
        font-size: 14px;
    }

    .filter-buttons {
        display: flex;
        gap: 8px;
    }

    .filter-btn {
        padding: 8px 16px;
        border: none;
        border-radius: 6px;
        font-size: 12px;
        cursor: pointer;
        transition: all 0.2s;
    }

    .filter-btn.primary {
        background: #667eea;
        color: white;
    }

    .filter-btn.secondary {
        background: #6c757d;
        color: white;
    }

    .filter-btn:hover {
        opacity: 0.8;
    }

    .parking-slots-container {
        max-height: 350px;
        overflow-y: auto;
        border: 1px solid #e9ecef;
        border-radius: 8px;
        padding: 10px;
        background: white;
    }

    .slot-checkbox {
        display: flex;
        align-items: center;
        padding: 10px;
        margin-bottom: 5px;
        border-radius: 6px;
        transition: all 0.3s ease;
        cursor: pointer;
        border: 1px solid transparent;
    }

    .slot-checkbox:hover {
        background: rgba(102, 126, 234, 0.1);
        border-color: rgba(102, 126, 234, 0.2);
    }

    .slot-checkbox.hidden {
        display: none;
    }

    .slot-checkbox input[type="checkbox"] {
        margin-right: 12px;
        width: 18px;
        height: 18px;
        accent-color: #667eea;
    }

    .slot-checkbox label {
        cursor: pointer;
        margin: 0;
        flex: 1;
        font-weight: 500;
        color: #495057;
    }

    .slot-floor-tag {
        background: rgba(102, 126, 234, 0.1);
        color: #667eea;
        padding: 2px 8px;
        border-radius: 12px;
        font-size: 11px;
        margin-left: auto;
        font-weight: 600;
    }

    /* User selection styling */
    .user-type-tabs {
        display: flex;
        background: #f8f9fa;
        border-radius: 10px;
        padding: 4px;
        margin-bottom: 15px;
    }

    .user-type-tab {
        flex: 1;
        padding: 10px;
        text-align: center;
        background: transparent;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.3s;
        font-weight: 500;
        color: #6c757d;
    }

    .user-type-tab.active {
        background: #667eea;
        color: white;
        box-shadow: 0 2px 8px rgba(102, 126, 234, 0.3);
    }

    .user-selection-container {
        display: none;
    }

    .user-selection-container.active {
        display: block;
    }

    .user-search-container {
        position: relative;
        margin-bottom: 15px;
    }

    .user-search-input {
        width: 100%;
        padding: 12px 40px 12px 15px;
        border: 2px solid #e9ecef;
        border-radius: 10px;
        font-size: 14px;
    }

    .user-search-input:focus {
        border-color: #667eea;
        outline: none;
    }

    .search-icon {
        position: absolute;
        right: 12px;
        top: 50%;
        transform: translateY(-50%);
        color: #6c757d;
    }

    .user-dropdown {
        max-height: 200px;
        overflow-y: auto;
        border: 1px solid #e9ecef;
        border-radius: 8px;
        background: white;
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }

    .user-option {
        padding: 12px 15px;
        cursor: pointer;
        border-bottom: 1px solid #f1f3f4;
        transition: background 0.2s;
    }

    .user-option:hover {
        background: rgba(102, 126, 234, 0.1);
    }

    .user-option.selected {
        background: rgba(102, 126, 234, 0.2);
        font-weight: 600;
    }

    .user-name {
        font-weight: 500;
        color: #495057;
    }

    .user-email {
        font-size: 12px;
        color: #6c757d;
    }

    .selected-slots {
        margin-top: 15px;
        padding: 15px;
        background: rgba(102, 126, 234, 0.05);
        border-radius: 10px;
        border: 1px dashed #667eea;
    }

    .selected-count {
        font-weight: 600;
        color: #667eea;
        margin-bottom: 8px;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .selected-list {
        display: flex;
        flex-wrap: wrap;
        gap: 6px;
    }

    .selected-slot-tag {
        background: #667eea;
        color: white;
        padding: 4px 8px;
        border-radius: 6px;
        font-size: 12px;
        font-weight: 500;
    }

    .no-results {
        text-align: center;
        padding: 20px;
        color: #6c757d;
        font-style: italic;
    }

    .stats-container {
        display: flex;
        gap: 15px;
        margin-bottom: 15px;
    }

    .stat-card {
        flex: 1;
        padding: 10px 15px;
        background: rgba(102, 126, 234, 0.05);
        border-radius: 8px;
        text-align: center;
    }

    .stat-number {
        font-size: 20px;
        font-weight: bold;
        color: #667eea;
    }

    .stat-label {
        font-size: 11px;
        color: #6c757d;
        margin-top: 2px;
    }

            .guest-info-box {
            background: rgba(40, 167, 69, 0.05);
            border: 1px solid rgba(40, 167, 69, 0.2);
            border-radius: 8px;
            padding: 15px;
            display: flex;
            align-items: flex-start;
            gap: 10px;
            color: #155724;
        }

        .guest-info-box i {
            color: #28a745;
            margin-top: 2px;
        }

        @@media (max-width: 768px) {
        .container-modern {
            padding: 1rem;
        }

        .filters-container {
            flex-direction: column;
        }

        .filter-group {
            min-width: auto;
        }

        .form-actions {
            flex-direction: column;
        }

        .btn-primary-modern,
        .btn-secondary-modern {
            width: 100%;
            text-align: center;
        }

        .stats-container {
            flex-direction: column;
            gap: 8px;
        }
    }

    .alert-success {
        background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
        color: white;
        border: none;
        border-radius: 12px;
        padding: 1rem;
        margin-bottom: 1.5rem;
    }

    .alert-danger {
        background: linear-gradient(135deg, #dc3545 0%, #e74c3c 100%);
        color: white;
        border: none;
        border-radius: 12px;
        padding: 1rem;
        margin-bottom: 1.5rem;
    }
</style>

<div class="container-modern">
    <h1 class="page-title">
        <i class="fas fa-plus-circle me-3"></i>Tạo đặt chỗ mới
    </h1>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success">
            <i class="fas fa-check-circle me-2"></i>
            @Html.Raw(TempData["SuccessMessage"])
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger">
            <i class="fas fa-exclamation-triangle me-2"></i>
            @Html.Raw(TempData["ErrorMessage"])
        </div>
    }

    <div class="modern-card">
        <div class="card-header-modern">
            <h4 class="mb-0">
                <i class="fas fa-car me-2"></i>Thông tin đặt chỗ
            </h4>
            <p class="mb-0 mt-2 opacity-75">Vui lòng điền đầy đủ thông tin để tạo đặt chỗ mới (có thể chọn nhiều chỗ đỗ)</p>
        </div>

        <div class="card-body p-4">
            <form asp-action="Create" method="post">
                <!-- Chọn chỗ đỗ với bộ lọc -->
                <div class="form-group-modern">
                    <label class="form-label-modern">
                        <i class="fas fa-parking me-2"></i>Chọn chỗ đỗ
                    </label>
                    
                    <div class="parking-section">
                        <!-- Thống kê -->
                        <div class="stats-container">
                            <div class="stat-card">
                                <div class="stat-number" id="totalSlots">0</div>
                                <div class="stat-label">Tổng số chỗ</div>
                            </div>
                            <div class="stat-card">
                                <div class="stat-number" id="visibleSlots">0</div>
                                <div class="stat-label">Hiển thị</div>
                            </div>
                            <div class="stat-card">
                                <div class="stat-number" id="selectedSlots">0</div>
                                <div class="stat-label">Đã chọn</div>
                            </div>
                        </div>

                        <!-- Bộ lọc -->
                        <div class="filters-container">
                            <div class="filter-group">
                                <label>Lọc theo tầng</label>
                                <select id="floorFilter" class="filter-input">
                                    <option value="">Tất cả các tầng</option>
                                </select>
                            </div>
                            <div class="filter-group">
                                <label>Tìm kiếm chỗ đỗ</label>
                                <input type="text" id="slotSearch" class="filter-input" placeholder="Nhập mã chỗ đỗ...">
                            </div>
                            <div class="filter-buttons">
                                <button type="button" id="selectAllVisible" class="filter-btn primary">
                                    <i class="fas fa-check-square me-1"></i>Chọn tất cả
                                </button>
                                <button type="button" id="deselectAll" class="filter-btn secondary">
                                    <i class="fas fa-square me-1"></i>Bỏ chọn
                                </button>
                            </div>
                        </div>

                        <!-- Danh sách chỗ đỗ -->
                        <div class="parking-slots-container" id="slotsContainer">
                            @if (ViewBag.AvailableSlots != null)
                            {
                                @foreach (var slot in (List<SelectListItem>)ViewBag.AvailableSlots)
                                {
                                    <div class="slot-checkbox" data-slot="@slot.Value" data-floor="@(slot.Text.Contains("Tầng") ? slot.Text.Split("Tầng")[1].Trim() : "1")">
                                        <input type="checkbox" name="SlotCodes" value="@slot.Value" id="slot_@slot.Value" />
                                        <label for="slot_@slot.Value">@slot.Text</label>
                                        <span class="slot-floor-tag">Tầng @(slot.Text.Contains("Tầng") ? slot.Text.Split("Tầng")[1].Trim() : "1")</span>
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="no-results">Không có chỗ đỗ nào khả dụng</div>
                            }
                        </div>

                        <!-- Chỗ đỗ đã chọn -->
                        <div class="selected-slots" id="selectedSlotsInfo" style="display: none;">
                            <div class="selected-count" id="selectedCount">
                                <i class="fas fa-check-circle"></i>
                                <span>Đã chọn: 0 chỗ đỗ</span>
                            </div>
                            <div class="selected-list" id="selectedList"></div>
                        </div>
                    </div>
                </div>

                <!-- Chọn người dùng -->
                <div class="form-group-modern">
                    <label class="form-label-modern">
                        <i class="fas fa-user me-2"></i>Người dùng
                    </label>
                    
                    <!-- Tabs cho loại người dùng -->
                    <div class="user-type-tabs">
                        <button type="button" class="user-type-tab active" data-user-type="existing">
                            <i class="fas fa-users me-2"></i>Người dùng có tài khoản
                        </button>
                        <button type="button" class="user-type-tab" data-user-type="guest">
                            <i class="fas fa-user-plus me-2"></i>Khách vãng lai
                        </button>
                    </div>

                    <!-- Chọn người dùng có tài khoản -->
                    <div class="user-selection-container active" id="existingUserContainer">
                        <div class="user-search-container">
                            <input type="text" id="userSearch" class="user-search-input" placeholder="Tìm kiếm theo tên hoặc email...">
                            <i class="fas fa-search search-icon"></i>
                        </div>
                        <div class="user-dropdown" id="userDropdown">
                            @if (ViewBag.Users != null)
                            {
                                @foreach (var user in (SelectList)ViewBag.Users)
                                {
                                    <div class="user-option" data-user-id="@user.Value" data-user-info="@user.Text">
                                        <div class="user-name">@user.Text.Split(" - ")[0]</div>
                                        <div class="user-email">@user.Text.Split(" - ")[1]</div>
                                    </div>
                                }
                            }
                        </div>
                        <input type="hidden" name="UserId" id="selectedUserId" />
                    </div>

                    <!-- Thông tin khách vãng lai -->
                    <div class="user-selection-container" id="guestUserContainer">
                        <input type="hidden" name="UserId" value="-1" id="guestUserId" disabled />
                        <div class="guest-info-box">
                            <i class="fas fa-info-circle me-2"></i>
                            <div>
                                <strong>Chế độ khách vãng lai</strong>
                                <p class="mb-0 small text-muted">Hệ thống sẽ tạo bản ghi đặt chỗ mà không cần tài khoản người dùng</p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Thông tin cá nhân -->
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group-modern">
                            <label class="form-label-modern">
                                <i class="fas fa-id-card me-2"></i>Họ tên
                            </label>
                            <input name="Name" id="nameInput" class="form-control form-control-modern" placeholder="Nhập họ tên đầy đủ" required />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group-modern">
                            <label class="form-label-modern">
                                <i class="fas fa-envelope me-2"></i>Email
                            </label>
                            <input name="Email" id="emailInput" type="email" class="form-control form-control-modern" placeholder="Nhập địa chỉ email" required />
                        </div>
                    </div>
                </div>

                <div class="form-group-modern">
                    <label class="form-label-modern">
                        <i class="fas fa-phone me-2"></i>Số điện thoại
                    </label>
                    <input name="Phone" id="phoneInput" class="form-control form-control-modern" placeholder="Nhập số điện thoại" required />
                </div>

                <div class="form-group-modern">
                    <label class="form-label-modern">
                        <i class="fas fa-calendar-times me-2"></i>Thời gian đặt chỗ
                    </label>
                    <input name="ReservedAt" class="form-control form-control-modern" type="datetime-local" value="@DateTime.Now.ToString("yyyy-MM-ddTHH:mm")" />
                    <small class="text-muted">Thời gian hết hạn sẽ tự động tính = thời gian đặt chỗ + 10 phút</small>
                </div>

                 @* <div class="form-group-modern">
                     <div class="checkbox-modern">
                         <input name="IsConfirmed" type="checkbox" id="IsConfirmed" />
                         <label for="IsConfirmed">
                             <i class="fas fa-check-circle me-2"></i>Xác nhận ngay và gửi email
                         </label>
                     </div>
                     <small class="text-muted">Nếu tích vào, hệ thống sẽ gửi email xác nhận cho từng chỗ đỗ được tạo</small>
                 </div>
 *@
                <div class="form-actions">
                    <button type="submit" class="btn btn-primary-modern" id="createBtn">
                        <i class="fas fa-save me-2"></i>Tạo đặt chỗ
                    </button>
                    <a asp-action="Index" class="btn btn-secondary-modern">
                        <i class="fas fa-arrow-left me-2"></i>Quay lại danh sách
                    </a>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        class ReservationManager {
            constructor() {
                this.slotCheckboxes = document.querySelectorAll('input[name="SlotCodes"]');
                this.selectedSlotsInfo = document.getElementById('selectedSlotsInfo');
                this.selectedCount = document.getElementById('selectedCount');
                this.selectedList = document.getElementById('selectedList');
                this.createBtn = document.getElementById('createBtn');
                this.form = document.querySelector('form');
                
                // Filter elements
                this.floorFilter = document.getElementById('floorFilter');
                this.slotSearch = document.getElementById('slotSearch');
                this.slotsContainer = document.getElementById('slotsContainer');
                
                // User selection elements
                this.userTypeTabs = document.querySelectorAll('.user-type-tab');
                this.userSearch = document.getElementById('userSearch');
                this.userDropdown = document.getElementById('userDropdown');
                this.selectedUserId = document.getElementById('selectedUserId');
                
                // Stats elements
                this.totalSlotsEl = document.getElementById('totalSlots');
                this.visibleSlotsEl = document.getElementById('visibleSlots');
                this.selectedSlotsEl = document.getElementById('selectedSlots');
                
                this.currentUserType = 'existing';
                this.availableFloors = new Set();
                this.filteredSlots = [];
                
                this.init();
            }

            init() {
                this.populateFloorFilter();
                this.setupEventListeners();
                this.updateStats();
                this.updateSelectedSlots();
                this.filterSlots();
            }

            populateFloorFilter() {
                // Lấy danh sách tầng từ các slot
                document.querySelectorAll('.slot-checkbox').forEach(slot => {
                    const floor = slot.getAttribute('data-floor');
                    this.availableFloors.add(floor);
                });

                // Thêm options vào floor filter
                Array.from(this.availableFloors).sort((a, b) => parseInt(a) - parseInt(b)).forEach(floor => {
                    const option = document.createElement('option');
                    option.value = floor;
                    option.textContent = `Tầng ${floor}`;
                    this.floorFilter.appendChild(option);
                });
            }

            setupEventListeners() {
                // Slot selection events
                this.slotCheckboxes.forEach(cb => {
                    cb.addEventListener('change', () => this.updateSelectedSlots());
                });

                // Filter events
                this.floorFilter.addEventListener('change', () => this.filterSlots());
                this.slotSearch.addEventListener('input', () => this.filterSlots());

                // Bulk selection events
                document.getElementById('selectAllVisible').addEventListener('click', () => this.selectAllVisible());
                document.getElementById('deselectAll').addEventListener('click', () => this.deselectAll());

                // User type tabs
                this.userTypeTabs.forEach(tab => {
                    tab.addEventListener('click', (e) => this.switchUserType(e.target.getAttribute('data-user-type')));
                });

                // User search
                this.userSearch.addEventListener('input', () => this.filterUsers());

                // User selection
                this.userDropdown.addEventListener('click', (e) => {
                    const userOption = e.target.closest('.user-option');
                    if (userOption) {
                        this.selectUser(userOption);
                    }
                });

                // Form validation
                this.form.addEventListener('submit', (e) => this.handleFormSubmit(e));
            }

            filterSlots() {
                const selectedFloor = this.floorFilter.value;
                const searchTerm = this.slotSearch.value.toLowerCase().trim();
                const allSlots = document.querySelectorAll('.slot-checkbox');
                
                let visibleCount = 0;

                allSlots.forEach(slot => {
                    const slotCode = slot.getAttribute('data-slot').toLowerCase();
                    const slotFloor = slot.getAttribute('data-floor');
                    const slotText = slot.querySelector('label').textContent.toLowerCase();
                    
                    let shouldShow = true;
                    
                    // Filter by floor
                    if (selectedFloor && slotFloor !== selectedFloor) {
                        shouldShow = false;
                    }
                    
                    // Filter by search term
                    if (searchTerm && !slotCode.includes(searchTerm) && !slotText.includes(searchTerm)) {
                        shouldShow = false;
                    }
                    
                    if (shouldShow) {
                        slot.classList.remove('hidden');
                        visibleCount++;
                    } else {
                        slot.classList.add('hidden');
                    }
                });

                this.updateStats();
                
                // Show no results message if needed
                const noResultsEl = this.slotsContainer.querySelector('.no-results');
                if (visibleCount === 0 && this.slotCheckboxes.length > 0) {
                    if (!noResultsEl) {
                        const noResults = document.createElement('div');
                        noResults.className = 'no-results';
                        noResults.innerHTML = '<i class="fas fa-search me-2"></i>Không tìm thấy chỗ đỗ phù hợp';
                        this.slotsContainer.appendChild(noResults);
                    }
                } else if (noResultsEl) {
                    noResultsEl.remove();
                }
            }

            selectAllVisible() {
                const visibleSlots = document.querySelectorAll('.slot-checkbox:not(.hidden) input[type="checkbox"]');
                visibleSlots.forEach(cb => cb.checked = true);
                this.updateSelectedSlots();
            }

            deselectAll() {
                this.slotCheckboxes.forEach(cb => cb.checked = false);
                this.updateSelectedSlots();
            }

            updateSelectedSlots() {
                const selectedSlots = Array.from(this.slotCheckboxes)
                    .filter(cb => cb.checked)
                    .map(cb => {
                        const label = document.querySelector(`label[for="${cb.id}"]`);
                        return {
                            value: cb.value,
                            text: label.textContent.trim()
                        };
                    });

                if (selectedSlots.length > 0) {
                    this.selectedSlotsInfo.style.display = 'block';
                    this.selectedCount.querySelector('span').textContent = `Đã chọn: ${selectedSlots.length} chỗ đỗ`;
                    this.selectedList.innerHTML = selectedSlots
                        .map(slot => `<span class="selected-slot-tag">${slot.value}</span>`)
                        .join('');
                    this.createBtn.innerHTML = `<i class="fas fa-save me-2"></i>Tạo ${selectedSlots.length} đặt chỗ`;
                } else {
                    this.selectedSlotsInfo.style.display = 'none';
                    this.createBtn.innerHTML = `<i class="fas fa-save me-2"></i>Tạo đặt chỗ`;
                }

                this.updateStats();
            }

            updateStats() {
                const totalSlots = this.slotCheckboxes.length;
                const visibleSlots = document.querySelectorAll('.slot-checkbox:not(.hidden)').length;
                const selectedSlots = Array.from(this.slotCheckboxes).filter(cb => cb.checked).length;

                this.totalSlotsEl.textContent = totalSlots;
                this.visibleSlotsEl.textContent = visibleSlots;
                this.selectedSlotsEl.textContent = selectedSlots;
            }

            switchUserType(type) {
                this.currentUserType = type;
                
                // Update tabs
                this.userTypeTabs.forEach(tab => {
                    tab.classList.remove('active');
                    if (tab.getAttribute('data-user-type') === type) {
                        tab.classList.add('active');
                    }
                });

                // Update containers
                document.querySelectorAll('.user-selection-container').forEach(container => {
                    container.classList.remove('active');
                });

                if (type === 'existing') {
                    document.getElementById('existingUserContainer').classList.add('active');
                    document.getElementById('selectedUserId').disabled = false;
                    document.getElementById('guestUserId').disabled = true;
                } else {
                    document.getElementById('guestUserContainer').classList.add('active');
                    document.getElementById('selectedUserId').disabled = true;
                    document.getElementById('guestUserId').disabled = false;
                    this.clearUserSelection();
                }

                this.clearPersonalInfo();
            }

            filterUsers() {
                const searchTerm = this.userSearch.value.toLowerCase().trim();
                const userOptions = this.userDropdown.querySelectorAll('.user-option');

                userOptions.forEach(option => {
                    const userName = option.querySelector('.user-name').textContent.toLowerCase();
                    const userEmail = option.querySelector('.user-email').textContent.toLowerCase();
                    
                    if (!searchTerm || userName.includes(searchTerm) || userEmail.includes(searchTerm)) {
                        option.style.display = 'block';
                    } else {
                        option.style.display = 'none';
                    }
                });

                // Show no results if needed
                const visibleOptions = Array.from(userOptions).filter(opt => opt.style.display !== 'none');
                let noResultsEl = this.userDropdown.querySelector('.no-user-results');
                
                if (visibleOptions.length === 0 && searchTerm) {
                    if (!noResultsEl) {
                        noResultsEl = document.createElement('div');
                        noResultsEl.className = 'no-user-results no-results';
                        noResultsEl.innerHTML = '<i class="fas fa-user-slash me-2"></i>Không tìm thấy người dùng phù hợp';
                        this.userDropdown.appendChild(noResultsEl);
                    }
                } else if (noResultsEl) {
                    noResultsEl.remove();
                }
            }

            selectUser(userOption) {
                // Clear previous selection
                this.userDropdown.querySelectorAll('.user-option').forEach(opt => {
                    opt.classList.remove('selected');
                });

                // Mark as selected
                userOption.classList.add('selected');

                // Get user data
                const userId = userOption.getAttribute('data-user-id');
                const userInfo = userOption.getAttribute('data-user-info').split(' - ');
                const userName = userInfo[0];
                const userEmail = userInfo[1];

                // Update form
                this.selectedUserId.value = userId;
                this.userSearch.value = `${userName} - ${userEmail}`;

                // Auto-populate personal info
                this.populatePersonalInfo(userName, userEmail);
            }

            populatePersonalInfo(name, email) {
                const nameInput = document.getElementById('nameInput');
                const emailInput = document.getElementById('emailInput');

                if (nameInput && !nameInput.value) {
                    nameInput.value = name;
                    this.animateField(nameInput);
                }

                if (emailInput && !emailInput.value) {
                    emailInput.value = email;
                    this.animateField(emailInput);
                }
            }

            clearUserSelection() {
                this.selectedUserId.value = '';
                this.userSearch.value = '';
                this.userDropdown.querySelectorAll('.user-option').forEach(opt => {
                    opt.classList.remove('selected');
                });
            }

            clearPersonalInfo() {
                if (this.currentUserType === 'guest') {
                    document.getElementById('nameInput').value = '';
                    document.getElementById('emailInput').value = '';
                    document.getElementById('phoneInput').value = '';
                }
            }

            animateField(field) {
                field.style.background = 'rgba(40, 167, 69, 0.1)';
                field.style.borderColor = '#28a745';
                setTimeout(() => {
                    field.style.background = '';
                    field.style.borderColor = '';
                }, 1500);
            }

            validateForm() {
                const selectedSlots = Array.from(this.slotCheckboxes).filter(cb => cb.checked);
                let errors = [];

                // Validate slots
                if (selectedSlots.length === 0) {
                    errors.push('Vui lòng chọn ít nhất một chỗ đỗ');
                }

                // Validate user selection
                if (this.currentUserType === 'existing') {
                    if (!this.selectedUserId.value) {
                        errors.push('Vui lòng chọn người dùng');
                    }
                }
                // Note: Với khách vãng lai, UserId sẽ được set = -1 hoặc null để controller xử lý

                // Validate personal info
                const name = document.getElementById('nameInput').value.trim();
                const email = document.getElementById('emailInput').value.trim();
                const phone = document.getElementById('phoneInput').value.trim();

                if (!name) {
                    errors.push('Vui lòng nhập họ tên');
                }

                if (!email) {
                    errors.push('Vui lòng nhập email');
                } else if (!this.isValidEmail(email)) {
                    errors.push('Định dạng email không hợp lệ');
                }

                if (!phone) {
                    errors.push('Vui lòng nhập số điện thoại');
                }

                return {
                    isValid: errors.length === 0,
                    errors: errors
                };
            }

            showErrors(errors) {
                // Remove existing alerts
                document.querySelectorAll('.alert-danger').forEach(alert => alert.remove());

                // Create new alert
                const alertDiv = document.createElement('div');
                alertDiv.className = 'alert alert-danger';
                alertDiv.innerHTML = `
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    <strong>Vui lòng kiểm tra lại:</strong>
                    <ul class="mb-0 mt-2">
                        ${errors.map(error => `<li>${error}</li>`).join('')}
                    </ul>
                `;

                // Insert before form
                this.form.parentNode.insertBefore(alertDiv, this.form);

                // Scroll to alert
                alertDiv.scrollIntoView({ behavior: 'smooth', block: 'center' });

                // Auto-hide after 5 seconds
                setTimeout(() => {
                    if (alertDiv.parentNode) {
                        alertDiv.remove();
                    }
                }, 5000);
            }

            handleFormSubmit(e) {
                const validation = this.validateForm();
                
                if (!validation.isValid) {
                    e.preventDefault();
                    this.showErrors(validation.errors);
                    return false;
                }

                // Show loading state
                this.createBtn.disabled = true;
                this.createBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Đang tạo đặt chỗ...';

                // Prevent double submission
                setTimeout(() => {
                    const formElements = this.form.querySelectorAll('input, select, button');
                    formElements.forEach(el => el.disabled = true);
                }, 100);

                return true;
            }

            isValidEmail(email) {
                const emailRegex = /^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/;
                return emailRegex.test(email);
            }
        }

        // Initialize when DOM is loaded
        document.addEventListener('DOMContentLoaded', function() {
            new ReservationManager();

            // Focus effects
            const inputs = document.querySelectorAll('.form-control-modern');
            inputs.forEach(input => {
                input.addEventListener('focus', function() {
                    this.parentElement.style.transform = 'translateY(-2px)';
                    this.parentElement.style.transition = 'transform 0.3s ease';
                });

                input.addEventListener('blur', function() {
                    this.parentElement.style.transform = 'translateY(0)';
                });
            });
        });
    </script>
}